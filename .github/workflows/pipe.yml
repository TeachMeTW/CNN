name: CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  ##############################################
  # Job 1: Build & Push Docker Image
  ##############################################
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # ----------------------------------------
      # Step 0: Free up disk space on GitHub runner
      # ----------------------------------------
      - name: Free up Disk Space on GitHub Runner
        run: |
          echo "Cleaning up unused Docker resources..."
          sudo docker system prune -af --volumes || true
          echo "Removing temporary files and caches..."
          sudo rm -rf /tmp/* $HOME/.cache/* $HOME/.npm $HOME/.pip $HOME/.cargo || true
          echo "Unmounting /mnt to free space..."
          sudo umount /mnt || true
          sudo rm -rf /mnt || true

      # ----------------------------------------
      # Step 1: Checkout the repository
      # ----------------------------------------
      - name: Checkout Code
        uses: actions/checkout@v3

      # ----------------------------------------
      # Step 2: Set up Docker Buildx
      # ----------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # ----------------------------------------
      # Step 3: Log in to Docker Hub
      # ----------------------------------------
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ----------------------------------------
      # Step 4: Build and push Docker image
      # ----------------------------------------
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:${{ github.sha }}

  ##############################################
  # Job 2: Deploy to Amazon Linux (EC2)
  ##############################################
  deploy:
    name: Deploy to Amazon Linux EC2
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            set -x
            
            echo "Starting deployment on Amazon Linux EC2..."
            
            # 1. Update & install Docker via yum
            sudo yum update -y
            sudo yum install -y docker
            
            # 2. Start & enable Docker
            sudo systemctl start docker
            sudo systemctl enable docker
            
            # 3. Perform Docker cleanup
            echo "Stopping and removing all existing containers..."
            existing_containers=$(sudo docker ps -aq)
            if [ -n "$existing_containers" ]; then
              sudo docker stop $existing_containers || true
              sudo docker rm $existing_containers || true
            fi

            echo "Removing all existing images..."
            existing_images=$(sudo docker images -q)
            if [ -n "$existing_images" ]; then
              sudo docker rmi -f $existing_images || true
            fi

            echo "Pruning Docker resources..."
            sudo docker volume prune -f || true
            sudo docker system prune -af --volumes || true
            sudo docker image prune -af --filter="dangling=true" || true

            # 4. Pull your application repo (if needed)
            REPO_DIR=~/CNN
            DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/streamlit:${{ github.sha }}
            PORT=8501

            echo "Navigating to repository directory..."
            cd $REPO_DIR || { echo "Repository directory not found! Exiting."; exit 1; }

            echo "Pulling latest changes from the repository..."
            git pull origin main

            # 5. Pull & run the Docker container
            echo "Pulling the Docker image..."
            sudo docker pull $DOCKER_IMAGE

            echo "Running the Docker container on port $PORT..."
            sudo docker run -d --name streamlit-container -p $PORT:8501 $DOCKER_IMAGE

            # 6. Health check & rollback if necessary
            sleep 10
            if ! curl -f http://localhost:$PORT; then
              echo "Health check failed! Rolling back..."
              sudo docker stop streamlit-container || true
              sudo docker rm streamlit-container || true
              sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest
              sudo docker run -d --name streamlit-container -p $PORT:8501 ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest
              sudo systemctl restart nginx
              exit 1
            fi

            echo "Health check passed. Restarting nginx..."
            sudo systemctl restart nginx

            # 7. Final Docker cleanup
            sudo docker system prune -af --volumes || true
            sudo docker image prune -af --filter="dangling=true" || true

            echo "Deployment completed successfully."
          EOF

