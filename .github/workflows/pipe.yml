name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 4: Build and push Docker image
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest

      # Step 5: Set up SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 6: Deploy to EC2 via SSH with Git Pull and Docker Cleanup
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Navigate to the repository directory
            echo "Navigating to repository directory..."
            cd ~/CNN || { echo "Repository directory not found! Exiting."; exit 1; }

            # Pull the latest changes from the repository
            echo "Pulling latest changes from the repository..."
            git pull origin main

            # Stop the existing Docker container if it's running
            echo "Stopping existing Docker container (if any)..."
            docker stop streamlit || true

            # Remove the existing Docker container
            echo "Removing existing Docker container..."
            docker rm streamlit || true

            # Pull the latest Docker image
            echo "Pulling the latest Docker image..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest

            # Run the new Docker container
            echo "Running the Docker container..."
            docker run -d --name streamlit -p 80:8501 ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest

            # Clean up unused Docker resources
            echo "Cleaning up unused Docker resources..."
            docker system prune -af --volumes
            docker image prune -af
            docker volume prune -f

            echo "Deployment and cleanup completed successfully."
          EOF
