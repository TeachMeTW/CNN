name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 0: Free up disk space at the start on GitHub runner
      - name: Free up Disk Space on GitHub Runner
        run: |
          echo "Cleaning up unused Docker resources..."
          sudo docker system prune -af --volumes || true
          echo "Removing temporary files and caches..."
          sudo rm -rf /tmp/* $HOME/.cache/* $HOME/.npm $HOME/.pip $HOME/.cargo || true
          echo "Unmounting /mnt to free space..."
          sudo umount /mnt || true
          sudo rm -rf /mnt || true

      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 4: Build and push Docker image with specific tag
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:${{ github.sha }}

      # Step 5: Set up SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 6: Deploy to EC2 via SSH with Git Pull, Docker Cleanup, and nginx Restart
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            echo "Starting deployment on EC2..."
            
            # Function to check and stop containers
            stop_containers() {
              local containers
              containers=$(sudo docker ps -aq)
              if [ -n "$containers" ]; then
                echo "Stopping containers: $containers"
                sudo docker stop $containers
              else
                echo "No containers to stop."
              fi
            }
            
            # Function to check and remove containers
            remove_containers() {
              local containers
              containers=$(sudo docker ps -aq)
              if [ -n "$containers" ]; then
                echo "Removing containers: $containers"
                sudo docker rm $containers
              else
                echo "No containers to remove."
              fi
            }
            
            # Function to remove all images
            remove_images() {
              local images
              images=$(sudo docker images -q)
              if [ -n "$images" ]; then
                echo "Removing images: $images"
                sudo docker rmi $images || true
              else
                echo "No images to remove."
              fi
            }
            
            echo "Deep cleaning unused Docker resources before deployment..."
            stop_containers
            remove_containers
            remove_images
            sudo docker volume prune -f | sudo tee -a /var/log/docker-cleanup.log >/dev/null || true
            sudo docker system prune -af --volumes | sudo tee -a /var/log/docker-cleanup.log >/dev/null || true
            echo "Docker cleanup completed."
            
            echo "Navigating to repository directory..."
            cd ~/CNN || { echo "Repository directory not found! Exiting."; exit 1; }
            
            echo "Pulling latest changes from the repository..."
            git pull origin main
            
            echo "Pulling the latest Docker image..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:${{ github.sha }}
            
            echo "Running the Docker container on port 8501..."
            sudo docker run -d --name streamlit-container -p 8501:8501 ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:${{ github.sha }}
            
            echo "Running health checks..."
            sleep 10
            if ! curl -f http://localhost:8501; then
              echo "Health check failed! Rolling back to previous Docker image..."
              sudo docker stop streamlit-container || true
              sudo docker rm streamlit-container || true
              sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest
              sudo docker run -d --name streamlit-container -p 8501:8501 ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest
              sudo systemctl restart nginx
              exit 1
            fi
            
            echo "Health check passed."
            
            echo "Restarting nginx..."
            sudo systemctl restart nginx
            
            echo "Final cleanup of unused Docker resources..."
            sudo bash -c 'docker system prune -af --volumes >> /var/log/docker-cleanup.log 2>&1'
            sudo bash -c 'docker image prune -af --filter="dangling=true" >> /var/log/docker-cleanup.log 2>&1'
            
            echo "Deployment and cleanup completed successfully."
          EOF
