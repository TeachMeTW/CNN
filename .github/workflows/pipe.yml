name: CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  ########################################################################
  # Job 1: Conditionally Build & Push Docker Image
  ########################################################################
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # -------------------------------------------------------------
      # (1) Check out the repository
      # -------------------------------------------------------------
      - name: Check out code
        uses: actions/checkout@v3

      # -------------------------------------------------------------
      # (2) Determine if Docker build is needed
      # -------------------------------------------------------------
      - name: Check if Docker build is needed
        id: docker-check
        shell: bash
        run: |
          git fetch --prune --unshallow || true
          echo "build_needed=true" >> $GITHUB_OUTPUT
          
          # previous_commit=${{ github.event.before }}
          # current_commit=${{ github.sha }}
          
          # if [[ "$previous_commit" == "0000000000000000000000000000000000000000" ]]; then
          #   echo "No previous commit (new branch/initial commit). Forcing build."
          #   echo "build_needed=true" >> $GITHUB_OUTPUT
          # else
          #   echo "Comparing changes from $previous_commit to $current_commit"
          #   if git diff --name-only $previous_commit $current_commit | grep -q -E '^(Dockerfile|requirements\.txt)$'; then
          #     echo "Changes in Dockerfile/requirements.txt found."
          #     echo "build_needed=true" >> $GITHUB_OUTPUT
          #   else
          #     echo "No changes detected in Dockerfile or requirements.txt."
          #     echo "build_needed=false" >> $GITHUB_OUTPUT
          #   fi
          # fi

      # -------------------------------------------------------------
      # (3) Set up Docker Buildx
      # -------------------------------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # -------------------------------------------------------------
      # (4) Log in to Docker Hub
      # -------------------------------------------------------------
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # -------------------------------------------------------------
      # (5) Build & push Docker image
      # -------------------------------------------------------------
      - name: Build and Push Docker image
        if: steps.docker-check.outputs.build_needed == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  ########################################################################
  # Job 2: Deploy Docker Container on Amazon Linux (EC2) via SSH
  ########################################################################
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      # -------------------------------------------------------------
      # (1) SSH Setup
      # -------------------------------------------------------------
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # -------------------------------------------------------------
      # (2) SSH into EC2 and deploy
      # -------------------------------------------------------------
      - name: Deploy to Amazon Linux EC2
        run: |
          ssh -o StrictHostKeyChecking=no \
              -o ServerAliveInterval=60 \
              -o ServerAliveCountMax=2 \
              ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -euxo pipefail
            echo "Starting deployment on Amazon Linux EC2..."

            # 1) Ensure Docker is running
            sudo systemctl enable docker
            sudo systemctl start docker

            # 2) Remove old repo
            rm -rf CNN

            # 3) Clone the repo to get docker-compose.yml
            git clone https://github.com/TeachMeTW/CNN.git CNN
            cd CNN

            # 4) Decode .env (base64)
            echo "${{ secrets.DOTENV_FILE }}" | base64 -d > .env
            cp ~/CNN/.env ~/.env
            # 5) docker-compose down - remove old containers that might hold port 8501
            sudo docker-compose down -v || true

            # 6) Pull prebuilt images (robinttw/streamlit:latest & mongo)
            sudo docker-compose pull

            # 7) Up in detached mode
            sudo docker-compose up -d

            # 8) Health check
            sleep 10
            if ! curl -f http://localhost:8501; then
              echo "Health check failed!"
              exit 1
            fi

            echo "Deployment done with prebuilt image!"
          EOF

  ########################################################################
  # Job 3: Configure Nginx as Reverse Proxy for cisconeural.net
  ########################################################################
  configure-nginx:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure Nginx on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -euxo pipefail
            echo "Configuring Nginx on Amazon Linux EC2..."
            
            # 1) Backup the default Nginx configuration if it exists
            sudo mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak 2>/dev/null || true
      
            # 2) Deploy the custom Nginx configuration from secret
            echo '${{ secrets.NGINX_CONFIG }}' | sudo tee /etc/nginx/conf.d/streamlit.conf
      
            # 3) Validate the Nginx configuration and restart the service
            sudo nginx -t
            sudo systemctl restart nginx
      
            echo "Done configuring Nginx with HTTPS support for Streamlit."
          EOF

