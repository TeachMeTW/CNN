name: CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  ########################################################################
  # Job 1: Conditionally Build & Push Docker Image
  ########################################################################
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # -------------------------------------------------------------
      # (1) Check out the repository
      # -------------------------------------------------------------
      - name: Check out code
        uses: actions/checkout@v3

      # -------------------------------------------------------------
      # (2) Determine if Docker build is needed
      #     Compare github.event.before to github.sha
      # -------------------------------------------------------------
      - name: Check if Docker build is needed
        id: docker-check
        shell: bash
        run: |
          # Fetch all history and tags
          git fetch --prune --unshallow
          
          previous_commit=${{ github.event.before }}
          current_commit=${{ github.sha }}
          
          # If "before" is all zeroes, there's no previous commit (new branch/initial commit)
          if [[ "$previous_commit" == "0000000000000000000000000000000000000000" ]]; then
            echo "No previous commit found (new branch or initial commit). Forcing build."
            echo "build_needed=true" >> $GITHUB_OUTPUT
          else
            echo "Comparing changes from $previous_commit to $current_commit"
            
            # Use git diff to check for changes in specific files
            if git diff --name-only $previous_commit $current_commit | grep -q -E '^(Dockerfile|requirements\.txt)$'; then
              echo "Changes detected in Dockerfile or requirements.txt"
              echo "build_needed=true" >> $GITHUB_OUTPUT
            else
              echo "No changes detected in Dockerfile or requirements.txt"
              echo "build_needed=false" >> $GITHUB_OUTPUT
            fi
          fi
      # -------------------------------------------------------------
      # (3) Set up Docker Buildx (for caching + multi-platform if needed)
      # -------------------------------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # -------------------------------------------------------------
      # (4) Log in to Docker Hub
      # -------------------------------------------------------------
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # -------------------------------------------------------------
      # (5) Build & push Docker image with caching (only if needed)
      # -------------------------------------------------------------
      - name: Build and Push Docker image
        if: steps.docker-check.outputs.build_needed == 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  ########################################################################
  # Job 2: Deploy Docker Container on Amazon Linux (EC2) via SSH
  ########################################################################
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push  # Ensures this job runs AFTER build-and-push

    steps:
      # -------------------------------------------------------------
      # (1) SSH Setup
      # -------------------------------------------------------------
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # -------------------------------------------------------------
      # (2) SSH into EC2 and run deployment steps
      # -------------------------------------------------------------
      - name: Deploy to Amazon Linux EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            set -x
            echo "Starting deployment on Amazon Linux EC2..."
            #################################################################
            # A. Install and start Docker (if not already installed)
            #################################################################
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            #################################################################
            # B. Stop & remove all existing containers
            #################################################################
            echo "Stopping and removing all existing containers..."
            existing_containers=$(sudo docker ps -aq)
            if [ -n "$existing_containers" ]; then
              sudo docker stop $existing_containers || true
              sudo docker rm $existing_containers || true
            fi
            #################################################################
            # C. (Optional) Remove all existing images
            #################################################################
            echo "Removing all existing images..."
            existing_images=$(sudo docker images -q)
            if [ -n "$existing_images" ]; then
              sudo docker rmi -f $existing_images || true
            fi
            #################################################################
            # D. Prune Docker resources
            #################################################################
            echo "Pruning Docker resources..."
            sudo docker volume prune -f || true
            sudo docker system prune -af --volumes || true
            # Some Docker versions on Amazon Linux 2023 may complain
            # about the 'dangling=[false true]' filter. Keep it simple:
            sudo docker image prune -f || true
            #################################################################
            # E. Pull your code locally (if needed) & pull Docker image
            #################################################################
            REPO_DIR=~/CNN
            DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest
            PORT=8501
            echo "Navigating to repository directory..."
            if [ ! -d "$REPO_DIR" ]; then
              echo "Directory not found, cloning repo for the first time..."
              git clone https://github.com/TeachMeTW/CNN.git $REPO_DIR
            fi
            cd $REPO_DIR || { echo "Repository directory not found! Exiting."; exit 1; }
            echo "Pulling latest changes from the repository..."
            git pull origin main || echo "Could not pull from repo. Check permissions."
            echo "Pulling the Docker image..."
            sudo docker pull $DOCKER_IMAGE || true
            #################################################################
            # F. Run the container & health check
            #################################################################
            echo "Running the Docker container on port $PORT..."
            sudo docker run -d --name streamlit-container -p $PORT:8501 $DOCKER_IMAGE
            echo "Waiting for container to initialize..."
            sleep 10
            echo "Performing health check..."
            if ! curl -f http://localhost:$PORT; then
              echo "Health check failed! Rolling back..."
              # Stop the failing container
              sudo docker stop streamlit-container || true
              sudo docker rm streamlit-container || true
              # Pull & run your fallback "latest" tag
              sudo docker pull $DOCKER_IMAGE || true
              sudo docker run -d --name streamlit-container -p $PORT:8501 $DOCKER_IMAGE
              # Restart Nginx (or any other services)
              sudo systemctl restart nginx || true
              exit 1
            fi
            echo "Health check passed! Container is up and running."
            # You could also restart Nginx here if desired:
            sudo systemctl restart nginx || true
            #################################################################
            # G. Final Docker cleanup
            #################################################################
            sudo docker system prune -af --volumes || true
            sudo docker image prune -f || true
            echo "Deployment completed successfully."
          EOF
  ########################################################################
  # Job 3: Configure Nginx as Reverse Proxy for cisconeural.net
  ########################################################################
  configure-nginx:
    runs-on: ubuntu-latest
    needs: deploy  # Runs AFTER the 'deploy' job completes

    steps:
      # -------------------------------------------------------------
      # (1) SSH Setup
      # -------------------------------------------------------------
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # -------------------------------------------------------------
      # (2) SSH into EC2 and configure Nginx + Docker container
      # -------------------------------------------------------------
      - name: Configure Nginx on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            set -x
            echo "Configuring Nginx on Amazon Linux EC2..."
            
            sudo mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak 2>/dev/null || true
            
            echo '${{ secrets.NGINX_CONFIG }}' | sudo tee /etc/nginx/conf.d/streamlit.conf
            
            sudo docker stop streamlit-container 2>/dev/null || true
            sudo docker rm streamlit-container 2>/dev/null || true
            sudo docker pull robinttw/streamlit:latest
            sudo docker run -d \
              --name streamlit-container \
              -p 8501:8501 \
              robinttw/streamlit:latest
            
            sudo docker ps
            
            sudo nginx -t
            sudo systemctl restart nginx
            echo "Done configuring Nginx and Streamlit container."
          EOF
