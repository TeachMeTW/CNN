name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 0: Free up disk space (unchanged)
      - name: Free up Disk Space on GitHub Runner
        run: |
          echo "Cleaning up unused Docker resources..."
          sudo docker system prune -af --volumes || true
          echo "Removing temporary files and caches..."
          sudo rm -rf /tmp/* $HOME/.cache/* $HOME/.npm $HOME/.pip $HOME/.cargo || true
          echo "Unmounting /mnt to free space..."
          sudo umount /mnt || true
          sudo rm -rf /mnt || true

      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 4: Build and push Docker image with specific tag
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/streamlit:${{ github.sha }}

      # Step 5: Set up SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 6: Deploy to EC2 via SSH with Docker Compose
      - name: Deploy to EC2
        env:
          DOTENV_FILE: ${{ secrets.DOTENV_FILE }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            # Exit immediately if a command exits with a non-zero status.
            set -e
      
            # Enable verbose logging
            set -x
      
            echo "Starting deployment on EC2..."
      
            # Define environment variables
            REPO_DIR=~/CNN
            LOG_FILE=/var/log/docker-cleanup.log
            DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/streamlit:${{ github.sha }}
      
            # Function to stop and remove all containers using docker-compose
            cleanup_docker_compose() {
              if [ -f "docker-compose.yml" ]; then
                echo "Stopping and removing Docker Compose services..."
                sudo docker-compose down -v || true
              fi
            }
      
            # Function to remove all images
            remove_images() {
              local images
              images=\$(sudo docker images -q)
              if [ -n "\$images" ]; then
                echo "Removing images: \$images"
                sudo docker rmi \$images || true
              fi
            }
      
            echo "Deep cleaning unused Docker resources before deployment..."
            cleanup_docker_compose
            remove_images
      
            # Perform Docker cleanup
            {
              sudo docker system prune -af --volumes
              sudo docker image prune -af --filter="dangling=true"
            } | sudo tee -a \$LOG_FILE >/dev/null || echo "Docker cleanup encountered an issue." | sudo tee -a \$LOG_FILE
      
            echo "Docker cleanup completed."
      
            echo "Navigating to repository directory..."
            cd \$REPO_DIR || { echo "Repository directory not found! Exiting."; exit 1; }
      
            echo "Pulling latest changes from the repository..."
            git pull origin main
      
            echo "Decoding and creating .env file..."
            echo "$DOTENV_FILE" | base64 -d > .env
      
            # Add the current image tag to .env
            echo "STREAMLIT_IMAGE=\${DOCKER_IMAGE}" >> .env
      
            echo "Starting services with Docker Compose..."
            sudo docker-compose pull
            sudo docker-compose up -d
      
            echo "Running health checks..."
            # Source the .env file to get the STREAMLIT_PORT
            source .env
            sleep 10
            if ! curl -f http://localhost:\${STREAMLIT_PORT:-8501}; then
              echo "Health check failed! Rolling back to previous version..."
              sudo docker-compose down
              echo "STREAMLIT_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/streamlit:latest" >> .env
              sudo docker-compose pull
              sudo docker-compose up -d
              sudo systemctl restart nginx
              exit 1
            fi
      
            echo "Health check passed."
      
            echo "Restarting nginx..."
            sudo systemctl restart nginx
      
            echo "Final cleanup of unused Docker resources..."
            {
              sudo docker system prune -af --volumes
              sudo docker image prune -af --filter="dangling=true"
            } | sudo tee -a \$LOG_FILE >/dev/null || echo "Final Docker cleanup encountered an issue." | sudo tee -a \$LOG_FILE
      
            echo "Deployment and cleanup completed successfully."
            EOF
